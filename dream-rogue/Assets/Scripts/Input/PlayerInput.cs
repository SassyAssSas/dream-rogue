//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""00454c49-3eaf-4b58-8783-d5edfe56a6b0"",
            ""actions"": [
                {
                    ""name"": ""Walking"",
                    ""type"": ""Value"",
                    ""id"": ""99015bf1-3c88-4df2-8428-42d6fea5fb8c"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""8767335d-253d-43d1-952a-c9da54ec9223"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""bbbeb340-e823-42e8-a43d-ec12056ed7c9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Quickfall"",
                    ""type"": ""Button"",
                    ""id"": ""4e2bfd51-e8b4-40be-b31e-51e5db10c8e1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""558f2c2a-3522-4d21-babc-54647a11be08"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""658f34cf-7f37-4620-a758-8cc97f8dc142"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fe39e430-c6fa-4704-9913-4f6cfcde5261"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""1b79c5d5-32fe-4742-ac55-17eda1e6cb40"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""801e6d51-bb5b-4f8e-b5d3-885384040dc4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""324b2215-a86a-4854-bf31-df8ff7cf789a"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9183bfaf-685a-492f-bb07-626ba8b5c949"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46ba73b6-873a-411b-abc3-d840e3707c16"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quickfall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Command"",
            ""id"": ""8d5a3856-58f8-4fc0-8663-7dbc9a81c7bb"",
            ""actions"": [
                {
                    ""name"": ""Begin"",
                    ""type"": ""Button"",
                    ""id"": ""5333d524-e8c1-44c7-a1f9-556e688704ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""5d060e56-c22a-40ff-b21c-f8de1a215972"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sumbit"",
                    ""type"": ""Button"",
                    ""id"": ""ed1e8ed0-c599-4e6e-b1e0-6d16ff99f80e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f4d8f0f4-fbd5-43da-89e6-3335858f9acc"",
                    ""path"": ""<Keyboard>/slash"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Begin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11650271-06fa-4d3f-b251-0528153cd1c3"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d925cfb0-a3bd-4701-adb7-bc498b629ea9"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sumbit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Walking = m_Player.FindAction("Walking", throwIfNotFound: true);
        m_Player_Dash = m_Player.FindAction("Dash", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Quickfall = m_Player.FindAction("Quickfall", throwIfNotFound: true);
        // Command
        m_Command = asset.FindActionMap("Command", throwIfNotFound: true);
        m_Command_Begin = m_Command.FindAction("Begin", throwIfNotFound: true);
        m_Command_Cancel = m_Command.FindAction("Cancel", throwIfNotFound: true);
        m_Command_Sumbit = m_Command.FindAction("Sumbit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Walking;
    private readonly InputAction m_Player_Dash;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Quickfall;
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walking => m_Wrapper.m_Player_Walking;
        public InputAction @Dash => m_Wrapper.m_Player_Dash;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Quickfall => m_Wrapper.m_Player_Quickfall;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Walking.started += instance.OnWalking;
            @Walking.performed += instance.OnWalking;
            @Walking.canceled += instance.OnWalking;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Quickfall.started += instance.OnQuickfall;
            @Quickfall.performed += instance.OnQuickfall;
            @Quickfall.canceled += instance.OnQuickfall;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Walking.started -= instance.OnWalking;
            @Walking.performed -= instance.OnWalking;
            @Walking.canceled -= instance.OnWalking;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Quickfall.started -= instance.OnQuickfall;
            @Quickfall.performed -= instance.OnQuickfall;
            @Quickfall.canceled -= instance.OnQuickfall;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Command
    private readonly InputActionMap m_Command;
    private List<ICommandActions> m_CommandActionsCallbackInterfaces = new List<ICommandActions>();
    private readonly InputAction m_Command_Begin;
    private readonly InputAction m_Command_Cancel;
    private readonly InputAction m_Command_Sumbit;
    public struct CommandActions
    {
        private @PlayerInput m_Wrapper;
        public CommandActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Begin => m_Wrapper.m_Command_Begin;
        public InputAction @Cancel => m_Wrapper.m_Command_Cancel;
        public InputAction @Sumbit => m_Wrapper.m_Command_Sumbit;
        public InputActionMap Get() { return m_Wrapper.m_Command; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CommandActions set) { return set.Get(); }
        public void AddCallbacks(ICommandActions instance)
        {
            if (instance == null || m_Wrapper.m_CommandActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CommandActionsCallbackInterfaces.Add(instance);
            @Begin.started += instance.OnBegin;
            @Begin.performed += instance.OnBegin;
            @Begin.canceled += instance.OnBegin;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
            @Sumbit.started += instance.OnSumbit;
            @Sumbit.performed += instance.OnSumbit;
            @Sumbit.canceled += instance.OnSumbit;
        }

        private void UnregisterCallbacks(ICommandActions instance)
        {
            @Begin.started -= instance.OnBegin;
            @Begin.performed -= instance.OnBegin;
            @Begin.canceled -= instance.OnBegin;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
            @Sumbit.started -= instance.OnSumbit;
            @Sumbit.performed -= instance.OnSumbit;
            @Sumbit.canceled -= instance.OnSumbit;
        }

        public void RemoveCallbacks(ICommandActions instance)
        {
            if (m_Wrapper.m_CommandActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICommandActions instance)
        {
            foreach (var item in m_Wrapper.m_CommandActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CommandActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CommandActions @Command => new CommandActions(this);
    public interface IPlayerActions
    {
        void OnWalking(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnQuickfall(InputAction.CallbackContext context);
    }
    public interface ICommandActions
    {
        void OnBegin(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
        void OnSumbit(InputAction.CallbackContext context);
    }
}
